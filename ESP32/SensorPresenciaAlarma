/*
Programa para el ESP32 que enciende una alarma cuando se detecta un movimiento y no se apaga hasta que se presiona un botón 
AUTOR: Mario García
Fecha de creacion: 14/02/2024
*/
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

//constantes
#define LED 25
#define SIR 18  //sensor IR de presencia
#define OFF 19
#define BUZZER 22

//funciones
esp_err_t pin_initialize();

void app_main(void)
{ 
    int botonoff = 0; //variable que guarda el valor de paro de la alarma 
    pin_initialize(); //llamamos nuestra funcion para inicializar puertos 
    while(1){
        botonoff = gpio_get_level(OFF); //guardamos el valor del boton de apagado
        if(gpio_get_level(SIR) == 1){ //preguntamos si el sensor de presencia detecto algo
            while (botonoff== 0 ){ //corroboramos si la alarma no ha sido apagada

                gpio_set_level(LED,1); //endendemos las luces
                gpio_set_level(BUZZER, 1); //encendemos bocinas

                botonoff = gpio_get_level(OFF); //corroboramos si la alarma no se ha apagado 
            }
            gpio_set_level(LED,0); //apagamos la alarma despues de presionar el boton de apagado
            gpio_set_level(BUZZER, 0);
        }else{
            gpio_set_level(LED,0);  //comprobamos que nuestra alarma siga a pagada si no detecta nada 
            gpio_set_level(BUZZER, 0);
        }
    }
}

//la siguiente es una funcion para inicialisar el pin  del led Y BUZZER para que funcione como salida  y sensor ir y off como entrada
esp_err_t pin_initialize() {
    gpio_reset_pin(LED);
    gpio_set_direction(LED, GPIO_MODE_OUTPUT);

    gpio_reset_pin(BUZZER);
    gpio_set_direction(BUZZER, GPIO_MODE_OUTPUT);

    gpio_reset_pin(SIR);
    gpio_set_direction(SIR, GPIO_MODE_INPUT);

    gpio_reset_pin(OFF);
    gpio_set_direction(OFF, GPIO_MODE_INPUT);

    return ESP_OK;
}
