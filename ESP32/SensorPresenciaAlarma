/*
Programa para el ESP32 que enciende una alarma cuando se detecta un movimiento y no se apaga hasta que se presiona un botón 
AUTOR: Mario García
Fecha de creacion: 14/02/2024
*/
#include "driver/gpio.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

// Constantes
#define LED 25
#define SIR 18  // Sensor IR de presencia
#define OFF 19
#define BUZZER 22

// Prototipos de función
esp_err_t pin_initialize();
void check_alarm();

void app_main(void)
{ 
    // Inicializar pines
    pin_initialize();

    while(1){
        // Comprobar la alarma
        check_alarm();

        // Pequeño retraso para evitar consumo excesivo de CPU
        vTaskDelay(100 / portTICK_PERIOD_MS);
    }
}

void check_alarm() {
    if(gpio_get_level(SIR) == 1){ // Se detecta movimiento
        printf("Movimiento detectado - Activando alarma\n");
        gpio_set_level(LED, 1); // Encender luces
        gpio_set_level(BUZZER, 1); // Encender alarma
    }
   /*  else {
        printf("Sin movimiento - Desactivando alarma\n");
        gpio_set_level(LED, 0); // Apagar la alarma si no se detecta movimiento
        gpio_set_level(BUZZER, 0);
      }*/

    if(gpio_get_level(OFF) == 1) { // Se presiona el botón de apagado
        printf("Botón de apagado presionado - Apagando alarma\n");
        gpio_set_level(LED, 0); // Apagar alarma
        gpio_set_level(BUZZER, 0);
        vTaskDelay(1000 / portTICK_PERIOD_MS); // Pequeño retraso para evitar problemas de rebote
    }
}

// Inicializar pines
esp_err_t pin_initialize() {
    gpio_reset_pin(LED);
    gpio_set_direction(LED, GPIO_MODE_OUTPUT);

    gpio_reset_pin(BUZZER);
    gpio_set_direction(BUZZER, GPIO_MODE_OUTPUT);

    gpio_reset_pin(SIR);
    gpio_set_direction(SIR, GPIO_MODE_INPUT);

    gpio_reset_pin(OFF);
    gpio_set_direction(OFF, GPIO_MODE_INPUT); // Configurar el pin 19 como entrada con pull-up interno

    return ESP_OK;
}
